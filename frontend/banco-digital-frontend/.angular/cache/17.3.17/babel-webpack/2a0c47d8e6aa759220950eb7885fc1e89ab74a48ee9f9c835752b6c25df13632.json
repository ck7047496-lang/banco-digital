{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nlet UsuarioService = class UsuarioService {\n  http;\n  apiUrl = 'http://localhost:8083/api';\n  constructor(http) {\n    this.http = http;\n  }\n  cadastrarUsuario(usuario) {\n    return this.http.post(`${this.apiUrl}/auth/cadastro`, usuario);\n  }\n  login(username, senha, userType) {\n    const credentials = {\n      username,\n      senha,\n      role: userType\n    };\n    return this.http.post(`${this.apiUrl}/auth/login`, credentials);\n  }\n  verificarStatusUsuario() {\n    // Este método deve ser chamado após o login para obter o status do usuário logado\n    // O backend deve retornar o status do usuário autenticado\n    return this.http.get(`${this.apiUrl}/usuario/dados`);\n  }\n  // --- Métodos para o Admin (antigo Gerente) ---\n  getUsuariosPendentes() {\n    return this.http.get(`${this.apiUrl}/admin/clientes/pendentes`);\n  }\n  buscarTodosUsuarios() {\n    return this.http.get(`${this.apiUrl}/admin/clientes`);\n  }\n  aprovarUsuario(cpf) {\n    return this.http.post(`${this.apiUrl}/admin/clientes/aprovar/${cpf}`, {});\n  }\n  getEmprestimosPendentes() {\n    return this.http.get(`${this.apiUrl}/admin/emprestimos/pendentes`);\n  }\n  aprovarEmprestimo(id) {\n    return this.http.post(`${this.apiUrl}/admin/emprestimos/aprovar/${id}`, {});\n  }\n  // --- Métodos para o Usuário (antigo Cliente) ---\n  getUsuarioByCpf(cpf) {\n    return this.http.get(`${this.apiUrl}/usuario/dados`);\n  }\n  solicitarEmprestimo(emprestimo) {\n    return this.http.post(`${this.apiUrl}/usuario/emprestimos/solicitar`, emprestimo);\n  }\n  getMeusEmprestimos() {\n    return this.http.get(`${this.apiUrl}/usuario/emprestimos`);\n  }\n  cadastrarGerente(gerente) {\n    return this.http.post(`${this.apiUrl}/auth/cadastro/gerente`, gerente);\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nUsuarioService = __decorate([Injectable({\n  providedIn: 'root'\n})], UsuarioService);\nexport { UsuarioService };","map":{"version":3,"names":["Injectable","HttpClient","UsuarioService","http","apiUrl","constructor","cadastrarUsuario","usuario","post","login","username","senha","userType","credentials","role","verificarStatusUsuario","get","getUsuariosPendentes","buscarTodosUsuarios","aprovarUsuario","cpf","getEmprestimosPendentes","aprovarEmprestimo","id","getUsuarioByCpf","solicitarEmprestimo","emprestimo","getMeusEmprestimos","cadastrarGerente","gerente","__decorate","providedIn"],"sources":["c:\\Users\\Clayton\\fullstech\\frontend\\banco-digital-frontend\\src\\app\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Usuario } from './models/usuario.model'; // Importa o modelo Usuario\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsuarioService {\r\n  private apiUrl = 'http://localhost:8083/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  cadastrarUsuario(usuario: Partial<Usuario>): Observable<Usuario> {\r\n    return this.http.post<Usuario>(`${this.apiUrl}/auth/cadastro`, usuario);\r\n  }\r\n\r\n  login(username: string, senha: string, userType: 'cliente' | 'gerente'): Observable<{ token: string, role: string }> {\r\n    const credentials = { username, senha, role: userType };\r\n    return this.http.post<{ token: string, role: string }>(`${this.apiUrl}/auth/login`, credentials);\r\n  }\r\n\r\n  verificarStatusUsuario(): Observable<{ status: string }> {\r\n    // Este método deve ser chamado após o login para obter o status do usuário logado\r\n    // O backend deve retornar o status do usuário autenticado\r\n    return this.http.get<{ status: string }>(`${this.apiUrl}/usuario/dados`);\r\n  }\r\n\r\n  // --- Métodos para o Admin (antigo Gerente) ---\r\n\r\n  getUsuariosPendentes(): Observable<Usuario[]> {\r\n    return this.http.get<Usuario[]>(`${this.apiUrl}/admin/clientes/pendentes`);\r\n  }\r\n\r\n  buscarTodosUsuarios(): Observable<Usuario[]> {\r\n    return this.http.get<Usuario[]>(`${this.apiUrl}/admin/clientes`);\r\n  }\r\n\r\n  aprovarUsuario(cpf: string): Observable<Usuario> {\r\n    return this.http.post<Usuario>(`${this.apiUrl}/admin/clientes/aprovar/${cpf}`, {});\r\n  }\r\n\r\n  getEmprestimosPendentes(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/admin/emprestimos/pendentes`);\r\n  }\r\n\r\n  aprovarEmprestimo(id: number): Observable<void> {\r\n    return this.http.post<void>(`${this.apiUrl}/admin/emprestimos/aprovar/${id}`, {});\r\n  }\r\n\r\n  // --- Métodos para o Usuário (antigo Cliente) ---\r\n\r\n  getUsuarioByCpf(cpf: string): Observable<Usuario> {\r\n    return this.http.get<Usuario>(`${this.apiUrl}/usuario/dados`);\r\n  }\r\n  \r\n  solicitarEmprestimo(emprestimo: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/usuario/emprestimos/solicitar`, emprestimo);\r\n  }\r\n\r\n  getMeusEmprestimos(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/usuario/emprestimos`);\r\n  }\r\n\r\n  cadastrarGerente(gerente: Partial<Usuario>): Observable<Usuario> {\r\n    return this.http.post<Usuario>(`${this.apiUrl}/auth/cadastro/gerente`, gerente);\r\n  }\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,sBAAsB;AAO1C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGLC,IAAA;EAFZC,MAAM,GAAG,2BAA2B;EAE5CC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCG,gBAAgBA,CAACC,OAAyB;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAU,GAAG,IAAI,CAACJ,MAAM,gBAAgB,EAAEG,OAAO,CAAC;EACzE;EAEAE,KAAKA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAA+B;IACpE,MAAMC,WAAW,GAAG;MAAEH,QAAQ;MAAEC,KAAK;MAAEG,IAAI,EAAEF;IAAQ,CAAE;IACvD,OAAO,IAAI,CAACT,IAAI,CAACK,IAAI,CAAkC,GAAG,IAAI,CAACJ,MAAM,aAAa,EAAES,WAAW,CAAC;EAClG;EAEAE,sBAAsBA,CAAA;IACpB;IACA;IACA,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAqB,GAAG,IAAI,CAACZ,MAAM,gBAAgB,CAAC;EAC1E;EAEA;EAEAa,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACd,IAAI,CAACa,GAAG,CAAY,GAAG,IAAI,CAACZ,MAAM,2BAA2B,CAAC;EAC5E;EAEAc,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACf,IAAI,CAACa,GAAG,CAAY,GAAG,IAAI,CAACZ,MAAM,iBAAiB,CAAC;EAClE;EAEAe,cAAcA,CAACC,GAAW;IACxB,OAAO,IAAI,CAACjB,IAAI,CAACK,IAAI,CAAU,GAAG,IAAI,CAACJ,MAAM,2BAA2BgB,GAAG,EAAE,EAAE,EAAE,CAAC;EACpF;EAEAC,uBAAuBA,CAAA;IACrB,OAAO,IAAI,CAAClB,IAAI,CAACa,GAAG,CAAQ,GAAG,IAAI,CAACZ,MAAM,8BAA8B,CAAC;EAC3E;EAEAkB,iBAAiBA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAACpB,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,MAAM,8BAA8BmB,EAAE,EAAE,EAAE,EAAE,CAAC;EACnF;EAEA;EAEAC,eAAeA,CAACJ,GAAW;IACzB,OAAO,IAAI,CAACjB,IAAI,CAACa,GAAG,CAAU,GAAG,IAAI,CAACZ,MAAM,gBAAgB,CAAC;EAC/D;EAEAqB,mBAAmBA,CAACC,UAAe;IACjC,OAAO,IAAI,CAACvB,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,gCAAgC,EAAEsB,UAAU,CAAC;EACnF;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACxB,IAAI,CAACa,GAAG,CAAQ,GAAG,IAAI,CAACZ,MAAM,sBAAsB,CAAC;EACnE;EAEAwB,gBAAgBA,CAACC,OAAyB;IACxC,OAAO,IAAI,CAAC1B,IAAI,CAACK,IAAI,CAAU,GAAG,IAAI,CAACJ,MAAM,wBAAwB,EAAEyB,OAAO,CAAC;EACjF;;;;;AA1DW3B,cAAc,GAAA4B,UAAA,EAH1B9B,UAAU,CAAC;EACV+B,UAAU,EAAE;CACb,CAAC,C,EACW7B,cAAc,CA2D1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}