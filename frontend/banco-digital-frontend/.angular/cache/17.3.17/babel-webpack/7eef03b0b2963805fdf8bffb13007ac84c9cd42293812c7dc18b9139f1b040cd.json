{"ast":null,"code":"import _asyncToGenerator from \"c:/Users/Clayton/fullstech/frontend/banco-digital-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\nimport { LoginComponent } from './login.component';\nimport { UsuarioService } from '../usuario.service';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let mockUsuarioService;\n  let mockRouter;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    mockUsuarioService = {\n      login: jasmine.createSpy('login').and.returnValue(of({\n        token: 'fake-token',\n        tipoUsuario: 'GERENTE'\n      }))\n    };\n    mockRouter = {\n      navigate: jasmine.createSpy('navigate')\n    };\n    yield TestBed.configureTestingModule({\n      imports: [LoginComponent, FormsModule, ReactiveFormsModule],\n      providers: [{\n        provide: UsuarioService,\n        useValue: mockUsuarioService\n      }, {\n        provide: Router,\n        useValue: mockRouter\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    component.ngOnInit(); // Initialize the form\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should navigate to painel-gerente on successful manager login', fakeAsync(() => {\n    component.loginForm.controls['email'].setValue('gerente@example.com');\n    component.loginForm.controls['senha'].setValue('password123');\n    component.userType = 'gerente'; // Set userType for the test\n    component.onSubmit();\n    tick();\n    expect(mockUsuarioService.login).toHaveBeenCalledWith('gerente@example.com', 'password123', 'gerente');\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/painel-gerente']);\n  }));\n  it('should display error message on failed login', fakeAsync(() => {\n    mockUsuarioService.login.and.returnValue(throwError({\n      status: 401\n    }));\n    component.loginForm.controls['email'].setValue('invalid@example.com');\n    component.loginForm.controls['senha'].setValue('wrongpassword');\n    component.userType = 'cliente'; // Set userType for the test\n    component.onSubmit();\n    tick();\n    expect(component.errorMessage).toBe('Credenciais inválidas ou cadastro pendente.'); // Updated error message\n    expect(mockRouter.navigate).not.toHaveBeenCalled();\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","Router","FormsModule","ReactiveFormsModule","of","throwError","LoginComponent","UsuarioService","describe","component","fixture","mockUsuarioService","mockRouter","beforeEach","_asyncToGenerator","login","jasmine","createSpy","and","returnValue","token","tipoUsuario","navigate","configureTestingModule","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","ngOnInit","detectChanges","it","expect","toBeTruthy","loginForm","controls","setValue","userType","onSubmit","toHaveBeenCalledWith","status","errorMessage","toBe","not","toHaveBeenCalled"],"sources":["c:\\Users\\Clayton\\fullstech\\frontend\\banco-digital-frontend\\src\\app\\login\\login.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { Router } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { of, throwError } from 'rxjs';\r\n\r\nimport { LoginComponent } from './login.component';\r\nimport { UsuarioService } from '../usuario.service';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n  let mockUsuarioService: any;\r\n  let mockRouter: any;\r\n\r\n  beforeEach(async () => {\r\n    mockUsuarioService = {\r\n      login: jasmine.createSpy('login').and.returnValue(of({ token: 'fake-token', tipoUsuario: 'GERENTE' }))\r\n    };\r\n    mockRouter = {\r\n      navigate: jasmine.createSpy('navigate')\r\n    };\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [LoginComponent, FormsModule, ReactiveFormsModule],\r\n      providers: [\r\n        { provide: UsuarioService, useValue: mockUsuarioService },\r\n        { provide: Router, useValue: mockRouter }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    component.ngOnInit(); // Initialize the form\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should navigate to painel-gerente on successful manager login', fakeAsync(() => {\r\n    component.loginForm.controls['email'].setValue('gerente@example.com');\r\n    component.loginForm.controls['senha'].setValue('password123');\r\n    component.userType = 'gerente'; // Set userType for the test\r\n    component.onSubmit();\r\n\r\n    tick();\r\n\r\n    expect(mockUsuarioService.login).toHaveBeenCalledWith('gerente@example.com', 'password123', 'gerente');\r\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/painel-gerente']);\r\n  }));\r\n\r\n  it('should display error message on failed login', fakeAsync(() => {\r\n    mockUsuarioService.login.and.returnValue(throwError({ status: 401 }));\r\n\r\n    component.loginForm.controls['email'].setValue('invalid@example.com');\r\n    component.loginForm.controls['senha'].setValue('wrongpassword');\r\n    component.userType = 'cliente'; // Set userType for the test\r\n    component.onSubmit();\r\n\r\n    tick();\r\n\r\n    expect(component.errorMessage).toBe('Credenciais inválidas ou cadastro pendente.'); // Updated error message\r\n    expect(mockRouter.navigate).not.toHaveBeenCalled();\r\n  }));\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}